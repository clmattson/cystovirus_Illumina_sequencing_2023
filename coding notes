#what are the reads?
for i in *.fastq; do sed -n '1~4s/^@/>/p;2~4p' $i > $i.fasta; done
for i in *.fasta; do blastn -query ${i} -subject wild_cysto_refs.fasta -outfmt '6 delim=,' -max_target_seqs 1 -max_hsps 1 >> ${i}_cysto_temp_blast_out.csv; done
for i in *.fasta; do sed "s/$/,"${i}"/" ${i}_cysto_temp_blast_out.csv > ${i}_${cysto_blast_db}_blast_out.csv; done
wc -l *_cysto_temp_blast_out.csv


#assess read quality
fastqc fastqs/*.fastq --outdir fastqc-out/


#quality trim
  
for pair in ./fastqs/*_*R1*.fastq; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp)
fastp --in1 ./fastqs/${sample}*R1*.fastq \
  --in2 ./fastqs/${sample}*R2*.fastq \
  --out1 ./trimmed_fastqs/${sample}_SXX_L001_R1_001.qtrim.fastq \
  --out2 ./trimmed_fastqs/${sample}_SXX_L001_R2_001.qtrim.fastq \
  --detect_adapter_for_pe \
  --length_required 31 --correction;
done


#remove host contamination

#build host db
bowtie2-build P_savastanoi_ref.fasta Ps_db

#align each set of reads to the host genome
for pair in ./fastqs/*_*R1*.fastq; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
bowtie2 -p 8 -x Ps_db -1 ./trimmed_fastqs/${sample}_SXX_L001_R1_001.qtrim.fastq  -2 ./trimmed_fastqs/${sample}_SXX_L001_R2_001.qtrim.fastq  -S ./trimmed_host/${sample}_SXX_L001_001.qtrim.htrim.sam;
done

#sam to bam

for pair in *_SXX_L001_001.qtrim.htrim.sam; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
samtools view -bS ${pair} > ${sample}_SXX_L001_001.qtrim.htrim.bam;
done

#sort bam
for pair in *_SXX_L001_001.qtrim.htrim.bam; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
samtools sort -o ${sample}_SXX_L001_001.qtrim.htrim.sorted.bam -T ./samtools_temp_dir --threads 24 ${pair};
done

#remove mapped reads
#actually I think this isnt quite right, see below
for pair in *_SXX_L001_001.qtrim.htrim.sorted.bam; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
samtools view -b -f 4 ${pair} > ${sample}_SXX_L001_001.qhtrim.sorted.unmapped.bam
done

#so the '-f 12' flag means to keep only reads where both mates in the pair are unmapped, which is more thorough since pe reads come from 1 piece of dna
for pair in *_SXX_L001_001.qtrim.htrim.sorted.bam; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
samtools view -b -f 12 ${pair} > ${sample}_SXX_L001_001.qhtrim.sorted.unmapped.bam
done


#need to get filtered bam back to fastq's. sort again?
#sort bam
for pair in *_SXX_L001_001.qhtrim.sorted.unmapped.bam; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
samtools sort -o ${sample}_SXX_L001_001.qhtrim.unmapped.sorted2.bam -T ./samtools_temp_dir2 --threads 24 ${pair};
done


for pair in *_SXX_L001_001.qhtrim.unmapped.sorted2.bam; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
samtools fastq -@ 8 ${sample}_SXX_L001_001.qhtrim.unmapped.sorted2.bam -1 ${sample}_SXX_L001_001.R1.qhtrim.unmapped.sorted2.fastq -2 ${sample}_SXX_L001_001.R2.qhtrim.unmapped.sorted2.fastq;
done



#assembly
#--metaviral
for pair in final_trimmed_fastqs/*_SXX_L001_001.R1.qhtrim.unmapped.sorted2.fastq; 
do file=$(basename $pair); 
sample_temp=${file%%_*}; 
sample=$(basename $sample_temp); 
spades.py --metaviral --pe1-1 final_trimmed_fastqs/${sample}_SXX_L001_001.R1.qhtrim.unmapped.sorted2.fastq --pe1-2 final_trimmed_fastqs/${sample}_SXX_L001_001.R2.qhtrim.unmapped.sorted2.fastq -o spades/metaviral/${sample}_metaviral_spades_output;
done


#--rnaviral
for pair in final_trimmed_fastqs/*_SXX_L001_001.R1.qhtrim.unmapped.sorted2.fastq; 
do file=$(basename $pair); 
sample_temp=${file%%_*}; 
sample=$(basename $sample_temp); 
spades.py --rnaviral --pe1-1 final_trimmed_fastqs/${sample}_SXX_L001_001.R1.qhtrim.unmapped.sorted2.fastq --pe1-2 final_trimmed_fastqs/${sample}_SXX_L001_001.R2.qhtrim.unmapped.sorted2.fastq -o spades/rnaviral/${sample}_metaviral_spades_output;
done


declare -a alph1=("C" "D" "E" "F" "G" "H" "I" "J")

for sample in "${alph1[@]}";
do spades.py --rnaviral --pe1-1 final_trimmed_fastqs/${sample}_SXX_L001_001.R1.qhtrim.unmapped.sorted2.fastq --pe1-2 final_trimmed_fastqs/${sample}_SXX_L001_001.R2.qhtrim.unmapped.sorted2.fastq -o spades/rnaviral/${sample}_metaviral_spades_output;
done

#rename the assembly files
for dir in *_rnaviral_spades_output;  do sample="${dir:0:1}";  mv ${dir}/scaffolds.fasta ${dir}/${sample}_scaffolds.fasta;  done


#used minimap to align the assemblies to the phi6 reference segments but honestly thhe alignments dont look great:
minimap2 -ax asm5 ref.fa asm.fa > aln.sam

#make giant file of all assemblies with phi6 S M and L at top
cat phi6_L.fasta *_rnaviral_spades_output/*_scaffolds.fasta >> L_all_whole_scaffolds.fasta
cat phi6_M.fasta *_rnaviral_spades_output/*_scaffolds.fasta >> M_all_whole_scaffolds.fasta
cat phi6_S.fasta *_rnaviral_spades_output/*_scaffolds.fasta >> S_all_whole_scaffolds.fasta

for dir in *_rnaviral_spades_output;
do sample="${dir:0:1}"; 
mafft-einsi --genafpair --adjustdirectionaccurately --maxiterate 1000 L_all_whole_scaffolds.fasta > L_all_whole_scaffolds.mafft.fasta







OK maybe spades --rnaviral assumes something untrue about recombination or something. Idk, lets try a diff setting for assembly
#maybe isolate spades?


#first lets align reads to phi6 genome to estimate coverage


#build phi6 db

bowtie2-build phi6_ref.fasta phi6DB

#align each set of reads to the phi6 genome
for pair in ./fastqs/*_*R1*.fastq; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
bowtie2 -p 8 -x phi6DB -1 ./trimmed_fastqs/${sample}_SXX_L001_R1_001.qtrim.fastq  -2 ./trimmed_fastqs/${sample}_SXX_L001_R2_001.qtrim.fastq  -S ./reads_to_phi6_ref/${sample}_SXX_L001_001.qtrim.p6aln.sam;
done

#sam to bam

for pair in *_SXX_L001_001.qtrim.p6aln.sam; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
samtools view -bS ${pair} > ${sample}_SXX_L001_001.qtrim.p6aln.bam;
done




#sort bam
for pair in *_SXX_L001_001.qtrim.p6aln.bam; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
samtools sort -o ${sample}_SXX_L001_001.qtrim.p6aln.sorted.bam -T ./samtools_temp_dir3 --threads 24 ${pair};
done

for pair in *_SXX_L001_001.qtrim.p6aln.sorted.bam; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
samtools view -b -F 4 -f 8 ${pair} > ${sample}_SXX_L001_001.qhtrim.sorted.mapped1.bam
samtools view -b -F 8 -f 4 ${pair} > ${sample}_SXX_L001_001.qhtrim.sorted.mapped2.bam
samtools view -b -F 12 ${pair} > ${sample}_SXX_L001_001.qhtrim.sorted.mapped_both.bam
done


for pair in *_SXX_L001_001.qtrim.p6aln.sorted.bam; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
samtools merge ${sample}_merged.bam ${sample}_SXX_L001_001.qhtrim.sorted.mapped1.bam ${sample}_SXX_L001_001.qhtrim.sorted.mapped2.bam ${sample}_SXX_L001_001.qhtrim.sorted.mapped_both.bam;
done

#sort again
for pair in *_merged.bam; 
#get leading sample name letter only
do sample_temp=${pair%%_*};
sample=$(basename $sample_temp);
samtools sort -o ${sample}_merged.sorted.bam -T ./samtools_temp_dir2 --threads 24 ${pair};
done


samtools view -F 4 -f 8 input.bam > only_this_end_mapped.sam
samtools view -F 8 -f 4 input.bam > only_that_end_mapped.sam
samtools view -F 12 input.bam > both_ends_mapped.sam

















#--isolate
for pair in final_trimmed_fastqs/*_SXX_L001_001.R1.qhtrim.unmapped.sorted2.fastq; 
do file=$(basename $pair); 
sample_temp=${file%%_*}; 
sample=$(basename $sample_temp); 
spades.py --rnaviral --pe1-1 final_trimmed_fastqs/${sample}_SXX_L001_001.R1.qhtrim.unmapped.sorted2.fastq --pe1-2 final_trimmed_fastqs/${sample}_SXX_L001_001.R2.qhtrim.unmapped.sorted2.fastq -o spades/rnaviral/${sample}_metaviral_spades_output;
done










